/*
 * Este software foi desenvolvido e criado por Rodrigo Attique Santana,
 * todos os algoritimos presentes aqui são de altoria do desenvolvedor, não sendo permitido
 * cópia ou distribuição sem o consentimento do mesmo.
 * É proibido vender, modificar, distribuir sem autorização.
 * copyright Attique Tecnologia.
 */
package views;

import br.attique.relatorios.Relatorio;
import controllers.ConfiguracoesController;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import models.Configuracoes;
import models.enuns.InformacoesSistema;
import models.usuarios.CasoUso;
import models.usuarios.Permissao;
import models.usuarios.Sessao;
import models.usuarios.Usuario;
import persistence.TextFile;
import persistence.jdbc.Conexao;
import utils.DataDefault;
import utils.DlgLogErros;
import utils.IntervalSelector;
import utils.Log;
import utils.ShowMessage;
import views.agenda.DlgAgenda;
import views.clientes.DlgCadastroCliente;
import views.profissionais.DlgCadastroProfissional;
import views.servicos.DlgServico;
import views.enderecos.DlgEndereco;

import views.produtos.DlgCadastroProduto;
import views.ordemservicos.DlgOrdemServico;
import views.usuarios.FrmAlterarSenha;
import views.usuarios.FrmLogin;

/**
 *
 * @author Rodrigo
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        
        initComponents();
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        login();
        
    }//fim construtor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        btnCliente = new javax.swing.JButton();
        btnServicos = new javax.swing.JButton();
        btnProdutos = new javax.swing.JButton();
        btnProfissional = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnEndereco = new javax.swing.JButton();
        btnConfiguracoes = new javax.swing.JButton();
        lblLogoMarca = new javax.swing.JLabel();
        statusBar = new javax.swing.JPanel();
        pnUsuario = new javax.swing.JPanel();
        lblUsuario = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblHorario = new javax.swing.JLabel();
        pnUsuario1 = new javax.swing.JPanel();
        lblInformacoes = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mnCadastros = new javax.swing.JMenu();
        mniClientes = new javax.swing.JMenuItem();
        mniServicos = new javax.swing.JMenuItem();
        mniProdutos = new javax.swing.JMenuItem();
        mniProfissionais = new javax.swing.JMenuItem();
        mniEnderecos = new javax.swing.JMenuItem();
        mnEditar = new javax.swing.JMenu();
        mniAlterarSenha = new javax.swing.JMenuItem();
        mnTrocarUsuario = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniConfiguracoes = new javax.swing.JMenuItem();
        mniLogErro = new javax.swing.JMenuItem();
        mnRelatorios = new javax.swing.JMenu();
        mniRelAniversariantes = new javax.swing.JMenuItem();
        mnRelPacientes = new javax.swing.JMenu();
        mniRelPacientesInativos = new javax.swing.JMenuItem();
        mniRelPacientesAtivos = new javax.swing.JMenuItem();
        mniRelPacientesCadPeriodo = new javax.swing.JMenuItem();
        mnRelProfissionais = new javax.swing.JMenu();
        mniRelProfissionaisInativos = new javax.swing.JMenuItem();
        mniRelProfissionaisAtivos = new javax.swing.JMenuItem();
        mniRelProfissionaisCadPeriodo = new javax.swing.JMenuItem();
        mnRelMedicos = new javax.swing.JMenu();
        mniRelMedicosInativos = new javax.swing.JMenuItem();
        mniRelMedicosAtivos = new javax.swing.JMenuItem();
        mniRelMedicosCadPeriodo = new javax.swing.JMenuItem();
        mnRelConvenios = new javax.swing.JMenu();
        mniRelConvenios = new javax.swing.JMenuItem();
        mniPacientesConvenio = new javax.swing.JMenuItem();
        mnAjuda = new javax.swing.JMenu();
        mniSobre = new javax.swing.JMenuItem();
        mniReferencias = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stokinho - Nome da sua empresa");

        toolbar.setRollover(true);

        btnCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/People.png"))); // NOI18N
        btnCliente.setText("Clientes");
        btnCliente.setFocusable(false);
        btnCliente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCliente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClienteActionPerformed(evt);
            }
        });
        toolbar.add(btnCliente);

        btnServicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Wrench.png"))); // NOI18N
        btnServicos.setText("Serviços");
        btnServicos.setFocusable(false);
        btnServicos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnServicos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnServicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServicosActionPerformed(evt);
            }
        });
        toolbar.add(btnServicos);

        btnProdutos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Shopping cart.png"))); // NOI18N
        btnProdutos.setText("Produtos");
        btnProdutos.setFocusable(false);
        btnProdutos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProdutos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProdutosActionPerformed(evt);
            }
        });
        toolbar.add(btnProdutos);

        btnProfissional.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Male.png"))); // NOI18N
        btnProfissional.setText("Profissionais");
        btnProfissional.setFocusable(false);
        btnProfissional.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProfissional.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProfissional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfissionalActionPerformed(evt);
            }
        });
        toolbar.add(btnProfissional);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/List.png"))); // NOI18N
        jButton1.setText("Ordem de Serviços");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        toolbar.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Calendar.png"))); // NOI18N
        jButton2.setText("Agenda");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        toolbar.add(jButton2);

        btnEndereco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Target.png"))); // NOI18N
        btnEndereco.setText("Endereços");
        btnEndereco.setFocusable(false);
        btnEndereco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEndereco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnderecoActionPerformed(evt);
            }
        });
        toolbar.add(btnEndereco);

        btnConfiguracoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/24x24/Application.png"))); // NOI18N
        btnConfiguracoes.setText("Configurações");
        btnConfiguracoes.setFocusable(false);
        btnConfiguracoes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConfiguracoes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConfiguracoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfiguracoesActionPerformed(evt);
            }
        });
        toolbar.add(btnConfiguracoes);

        lblLogoMarca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        statusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEADING);
        flowLayout1.setAlignOnBaseline(true);
        statusBar.setLayout(flowLayout1);

        pnUsuario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        lblUsuario.setText("Usuário:");

        javax.swing.GroupLayout pnUsuarioLayout = new javax.swing.GroupLayout(pnUsuario);
        pnUsuario.setLayout(pnUsuarioLayout);
        pnUsuarioLayout.setHorizontalGroup(
            pnUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsuario)
                .addContainerGap(199, Short.MAX_VALUE))
        );
        pnUsuarioLayout.setVerticalGroup(
            pnUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsuario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusBar.add(pnUsuario);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        lblHorario.setText("Horário:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHorario)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHorario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusBar.add(jPanel3);

        pnUsuario1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        lblInformacoes.setText("Informacoes");

        javax.swing.GroupLayout pnUsuario1Layout = new javax.swing.GroupLayout(pnUsuario1);
        pnUsuario1.setLayout(pnUsuario1Layout);
        pnUsuario1Layout.setHorizontalGroup(
            pnUsuario1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUsuario1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInformacoes)
                .addContainerGap(206, Short.MAX_VALUE))
        );
        pnUsuario1Layout.setVerticalGroup(
            pnUsuario1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUsuario1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInformacoes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statusBar.add(pnUsuario1);

        mnCadastros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Table.png"))); // NOI18N
        mnCadastros.setMnemonic(KeyEvent.VK_C);
        mnCadastros.setText("Cadastros");

        mniClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/People.png"))); // NOI18N
        mniClientes.setText("Clientes");
        mniClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClientesActionPerformed(evt);
            }
        });
        mnCadastros.add(mniClientes);

        mniServicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Wrench.png"))); // NOI18N
        mniServicos.setText("Servicos");
        mniServicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniServicosActionPerformed(evt);
            }
        });
        mnCadastros.add(mniServicos);

        mniProdutos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Shopping cart.png"))); // NOI18N
        mniProdutos.setText("Produtos");
        mniProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniProdutosActionPerformed(evt);
            }
        });
        mnCadastros.add(mniProdutos);

        mniProfissionais.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Male.png"))); // NOI18N
        mniProfissionais.setText("Profissionais");
        mniProfissionais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniProfissionaisActionPerformed(evt);
            }
        });
        mnCadastros.add(mniProfissionais);

        mniEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Target.png"))); // NOI18N
        mniEnderecos.setText("Endereços");
        mniEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniEnderecosActionPerformed(evt);
            }
        });
        mnCadastros.add(mniEnderecos);

        menuBar.add(mnCadastros);

        mnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Modify.png"))); // NOI18N
        mnEditar.setMnemonic(KeyEvent.
            VK_E);
        mnEditar.setText("Editar");

        mniAlterarSenha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Key.png"))); // NOI18N
        mniAlterarSenha.setText("Alterar Senha");
        mniAlterarSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAlterarSenhaActionPerformed(evt);
            }
        });
        mnEditar.add(mniAlterarSenha);

        mnTrocarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Blue key.png"))); // NOI18N
        mnTrocarUsuario.setText("Trocar de Usuário");
        mnTrocarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnTrocarUsuarioActionPerformed(evt);
            }
        });
        mnEditar.add(mnTrocarUsuario);
        mnEditar.add(jSeparator1);

        mniConfiguracoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Application.png"))); // NOI18N
        mniConfiguracoes.setText("Configurações");
        mniConfiguracoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniConfiguracoesActionPerformed(evt);
            }
        });
        mnEditar.add(mniConfiguracoes);

        mniLogErro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Error.png"))); // NOI18N
        mniLogErro.setText("Logs de Erro");
        mniLogErro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLogErroActionPerformed(evt);
            }
        });
        mnEditar.add(mniLogErro);

        menuBar.add(mnEditar);

        mnRelatorios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Report.png"))); // NOI18N
        mnRelatorios.setMnemonic(KeyEvent.VK_R);
        mnRelatorios.setText("Relatorios");

        mniRelAniversariantes.setText("Aniversariantes do Mês");
        mniRelAniversariantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelAniversariantesActionPerformed(evt);
            }
        });
        mnRelatorios.add(mniRelAniversariantes);

        mnRelPacientes.setText("Pacientes");

        mniRelPacientesInativos.setText("Pacientes Inativos");
        mniRelPacientesInativos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelPacientesInativosActionPerformed(evt);
            }
        });
        mnRelPacientes.add(mniRelPacientesInativos);

        mniRelPacientesAtivos.setText("Pacientes Ativos");
        mniRelPacientesAtivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelPacientesAtivosActionPerformed(evt);
            }
        });
        mnRelPacientes.add(mniRelPacientesAtivos);

        mniRelPacientesCadPeriodo.setText("Pacientes Cadastrados em um período");
        mniRelPacientesCadPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelPacientesCadPeriodoActionPerformed(evt);
            }
        });
        mnRelPacientes.add(mniRelPacientesCadPeriodo);

        mnRelatorios.add(mnRelPacientes);

        mnRelProfissionais.setText("Profissionais");

        mniRelProfissionaisInativos.setText("Profissionais Inativos");
        mniRelProfissionaisInativos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelProfissionaisInativosActionPerformed(evt);
            }
        });
        mnRelProfissionais.add(mniRelProfissionaisInativos);

        mniRelProfissionaisAtivos.setText("Profissionais Ativos");
        mniRelProfissionaisAtivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelProfissionaisAtivosActionPerformed(evt);
            }
        });
        mnRelProfissionais.add(mniRelProfissionaisAtivos);

        mniRelProfissionaisCadPeriodo.setText("Profissionais Cadastrados em um período");
        mniRelProfissionaisCadPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelProfissionaisCadPeriodoActionPerformed(evt);
            }
        });
        mnRelProfissionais.add(mniRelProfissionaisCadPeriodo);

        mnRelatorios.add(mnRelProfissionais);

        mnRelMedicos.setText("Médicos");

        mniRelMedicosInativos.setText("Médicos Inativos");
        mniRelMedicosInativos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelMedicosInativosActionPerformed(evt);
            }
        });
        mnRelMedicos.add(mniRelMedicosInativos);

        mniRelMedicosAtivos.setText("Médicos Ativos");
        mniRelMedicosAtivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelMedicosAtivosActionPerformed(evt);
            }
        });
        mnRelMedicos.add(mniRelMedicosAtivos);

        mniRelMedicosCadPeriodo.setText("Médicos Cadastrados em um período");
        mniRelMedicosCadPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelMedicosCadPeriodoActionPerformed(evt);
            }
        });
        mnRelMedicos.add(mniRelMedicosCadPeriodo);

        mnRelatorios.add(mnRelMedicos);

        mnRelConvenios.setText("Convênios");

        mniRelConvenios.setText("Convênios");
        mniRelConvenios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRelConveniosActionPerformed(evt);
            }
        });
        mnRelConvenios.add(mniRelConvenios);

        mniPacientesConvenio.setText("Pacientes por convênio");
        mniPacientesConvenio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPacientesConvenioActionPerformed(evt);
            }
        });
        mnRelConvenios.add(mniPacientesConvenio);

        mnRelatorios.add(mnRelConvenios);

        menuBar.add(mnRelatorios);

        mnAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Help.png"))); // NOI18N
        mnAjuda.setText("Ajuda");

        mniSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/About.png"))); // NOI18N
        mniSobre.setText("Sobre");
        mniSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSobreActionPerformed(evt);
            }
        });
        mnAjuda.add(mniSobre);

        mniReferencias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/imagens/18x18/Help book.png"))); // NOI18N
        mniReferencias.setText("Referências");
        mniReferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniReferenciasActionPerformed(evt);
            }
        });
        mnAjuda.add(mniReferencias);

        menuBar.add(mnAjuda);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblLogoMarca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLogoMarca, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClienteActionPerformed
        DlgCadastroCliente cp = new DlgCadastroCliente(this, rootPaneCheckingEnabled);
        cp.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnClienteActionPerformed

    private void btnProfissionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfissionalActionPerformed
        DlgCadastroProfissional dcp = new DlgCadastroProfissional(this, rootPaneCheckingEnabled);
        dcp.setVisible(true);
    }//GEN-LAST:event_btnProfissionalActionPerformed

    private void btnProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProdutosActionPerformed
        DlgCadastroProduto cp = new DlgCadastroProduto(this, rootPaneCheckingEnabled);
        cp.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnProdutosActionPerformed

    private void btnServicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServicosActionPerformed
        DlgServico cp = new DlgServico(this, rootPaneCheckingEnabled);
        cp.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnServicosActionPerformed

    private void btnEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnderecoActionPerformed
        DlgEndereco de = new DlgEndereco(this, rootPaneCheckingEnabled);
        de.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnEnderecoActionPerformed

    private void mniConfiguracoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniConfiguracoesActionPerformed
        DlgConfiguracoes dc = new DlgConfiguracoes(this, rootPaneCheckingEnabled);
        dc.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_mniConfiguracoesActionPerformed

    private void mnTrocarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnTrocarUsuarioActionPerformed
        Sessao.getInstance().getUsuario().setLogin(null);
        login();
    }//GEN-LAST:event_mnTrocarUsuarioActionPerformed

    private void mniClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniClientesActionPerformed
        DlgCadastroCliente cp = new DlgCadastroCliente(this, rootPaneCheckingEnabled);
        cp.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_mniClientesActionPerformed

    private void mniServicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniServicosActionPerformed
        btnServicosActionPerformed(evt);
    }//GEN-LAST:event_mniServicosActionPerformed

    private void mniProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniProdutosActionPerformed
        btnProdutosActionPerformed(evt);
    }//GEN-LAST:event_mniProdutosActionPerformed

    private void mniProfissionaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniProfissionaisActionPerformed
        btnProfissionalActionPerformed(evt);
    }//GEN-LAST:event_mniProfissionaisActionPerformed

    private void mniEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniEnderecosActionPerformed
        btnEnderecoActionPerformed(evt);
    }//GEN-LAST:event_mniEnderecosActionPerformed

    private void btnConfiguracoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfiguracoesActionPerformed
        mniConfiguracoesActionPerformed(evt);
    }//GEN-LAST:event_btnConfiguracoesActionPerformed

    private void mniAlterarSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAlterarSenhaActionPerformed
        FrmAlterarSenha fas = new FrmAlterarSenha(this, rootPaneCheckingEnabled);
        fas.setUsuario(Sessao.getInstance().getUsuario());
        fas.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_mniAlterarSenhaActionPerformed

    private void mniLogErroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLogErroActionPerformed
        DlgLogErros log = new DlgLogErros(this, rootPaneCheckingEnabled);
        log.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_mniLogErroActionPerformed

    private void mniSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSobreActionPerformed
        ShowMessage.informationMessage("Sistema de Gestão de Clínicas"
                + "\nVersão 1.0 de 04 maio 2016"
                + "\nDesenvolvido por: Rodrigo Attique Santana"
                + "\nattiquetecnologia@gmail.com - attiquetecnologia.com.br"
                + "\nTodos os direitos reservados."
        );
    }//GEN-LAST:event_mniSobreActionPerformed

    private void mniRelAniversariantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelAniversariantesActionPerformed
        /**
         * Janela para escolher um mês no sistema e pesquisar por ele.
         */
        
        IntervalSelector iSelector = new IntervalSelector(this, rootPaneCheckingEnabled);
        iSelector.setVisible(true);
        if (iSelector.getInterval() != null){
            
            String query = "select p.* from pessoas p  "
                    + "where extract(MONTH from p.pes_nascimento)  "
                    + "between extract(MONTH from cast(':inicio' as date)) and extract(MONTH from cast(':fim' as date)) "
                    + "order by p.pes_nascimento asc";
            query = query.replace(":inicio", iSelector.getInterval().getStart().toString("yyyy-MM-dd"));
            query = query.replace(":fim", iSelector.getInterval().getEnd().toString("yyyy-MM-dd"));
            
            HashMap map = new HashMap();
            map.put("TITULO", "Aniversariantes do Mês");
            map.put("KEYWORDS",String.format(
                    "De %s a %s",DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getStartMillis()))
                    , DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getEndMillis()))
                ));
            map.put("QUERY",query);
            Relatorio relatorio = new Relatorio();
            relatorio.setRelName("rp_aniversariantes_ret.jasper");
            relatorio.setParams(map);
            relatorio.setConexao(Conexao.getConexao());
            relatorio.setIsExiteOnClose(false);
            Thread th = new Thread(relatorio);
            th.start();
        }//fim se selecionar intervalor
            
    }//GEN-LAST:event_mniRelAniversariantesActionPerformed

    private void mniRelPacientesInativosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelPacientesInativosActionPerformed
        
        String query = "select p.* from pessoas p join clientes pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 0 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Clientes inativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelPacientesInativosActionPerformed

    private void mniRelPacientesAtivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelPacientesAtivosActionPerformed
        String query = "select p.* from pessoas p join clientes pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 1 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Clientes ativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelPacientesAtivosActionPerformed

    private void mniRelPacientesCadPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelPacientesCadPeriodoActionPerformed
        IntervalSelector iSelector = new IntervalSelector(this, rootPaneCheckingEnabled);
        iSelector.setVisible(true);
        
        if (iSelector.getInterval() != null) {
            
            String query = "select p.* from pessoas p join clientes pa on (pa.pes_id = p.pes_id) "
                    + "where p.pes_data_cadastro "
                    + "between ':inicio' and ':fim' "
                    + "order by p.pes_data_cadastro asc";
            query = query.replace(":inicio", iSelector.getInterval().getStart().toString("yyyy-MM-dd"));
            query = query.replace(":fim", iSelector.getInterval().getEnd().toString("yyyy-MM-dd"));

            
            HashMap map = new HashMap();
            map.put("TITULO", "Clientes cadastrados em um período");
            map.put("SUBTITULO","");
            map.put("KEYWORDS",String.format(
                    "De %s a %s",DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getStartMillis()))
                    , DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getEndMillis()))
                ));
            map.put("QUERY",query);
            
            Relatorio relatorio = new Relatorio();
            relatorio.setRelName("rp_pessoas_ret.jasper");
            relatorio.setParams(map);
            relatorio.setConexao(Conexao.getConexao());
            relatorio.setIsExiteOnClose(false);
            Thread th = new Thread(relatorio);
            th.start();
        }//fim se selecionar intervalor
    }//GEN-LAST:event_mniRelPacientesCadPeriodoActionPerformed

    private void mniRelProfissionaisInativosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelProfissionaisInativosActionPerformed
        String query = "select p.* from pessoas p join profissionais pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 0 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Profissionais inativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelProfissionaisInativosActionPerformed

    private void mniRelProfissionaisCadPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelProfissionaisCadPeriodoActionPerformed
        IntervalSelector iSelector = new IntervalSelector(this, rootPaneCheckingEnabled);
        iSelector.setVisible(true);
        
        if (iSelector.getInterval() != null) {
            
            String query = "select p.* from pessoas p join profissionais pa on (pa.pes_id = p.pes_id) "
                    + "where p.pes_data_cadastro "
                    + "between ':inicio' and ':fim' "
                    + "order by p.pes_data_cadastro asc";
            query = query.replace(":inicio", iSelector.getInterval().getStart().toString("yyyy-MM-dd"));
            query = query.replace(":fim", iSelector.getInterval().getEnd().toString("yyyy-MM-dd"));

            
            HashMap map = new HashMap();
            map.put("TITULO", "Profissionais cadastrados em um período");
            map.put("SUBTITULO","");
            map.put("KEYWORDS",String.format(
                    "De %s a %s",DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getStartMillis()))
                    , DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getEndMillis()))
                ));
            map.put("QUERY",query);
            
            Relatorio relatorio = new Relatorio();
            relatorio.setRelName("rp_pessoas_ret.jasper");
            relatorio.setParams(map);
            relatorio.setConexao(Conexao.getConexao());
            relatorio.setIsExiteOnClose(false);
            Thread th = new Thread(relatorio);
            th.start();
        }//fim se selecionar intervalor
    }//GEN-LAST:event_mniRelProfissionaisCadPeriodoActionPerformed

    private void mniRelProfissionaisAtivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelProfissionaisAtivosActionPerformed
        String query = "select p.* from pessoas p join profissionais pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 1 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Profissionais ativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelProfissionaisAtivosActionPerformed

    private void mniRelMedicosInativosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelMedicosInativosActionPerformed
        String query = "select p.* from pessoas p join medicos pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 0 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Médicos inativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelMedicosInativosActionPerformed

    private void mniRelMedicosCadPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelMedicosCadPeriodoActionPerformed
        IntervalSelector iSelector = new IntervalSelector(this, rootPaneCheckingEnabled);
        iSelector.setVisible(true);
        
        if (iSelector.getInterval() != null) {
            
            String query = "select p.* from pessoas p join medicos pa on (pa.pes_id = p.pes_id) "
                    + "where p.pes_data_cadastro "
                    + "between ':inicio' and ':fim' "
                    + "order by p.pes_data_cadastro asc";
            query = query.replace(":inicio", iSelector.getInterval().getStart().toString("yyyy-MM-dd"));
            query = query.replace(":fim", iSelector.getInterval().getEnd().toString("yyyy-MM-dd"));

            
            HashMap map = new HashMap();
            map.put("TITULO", "Médicos cadastrados em um período");
            map.put("SUBTITULO","");
            map.put("KEYWORDS",String.format(
                    "De %s a %s",DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getStartMillis()))
                    , DataDefault.parseDataBrasil(new Date(iSelector.getInterval().getEndMillis()))
                ));
            map.put("QUERY",query);
            
            Relatorio relatorio = new Relatorio();
            relatorio.setRelName("rp_pessoas_ret.jasper");
            relatorio.setParams(map);
            relatorio.setConexao(Conexao.getConexao());
            relatorio.setIsExiteOnClose(false);
            Thread th = new Thread(relatorio);
            th.start();
        }//fim se selecionar intervalor
    }//GEN-LAST:event_mniRelMedicosCadPeriodoActionPerformed

    private void mniRelMedicosAtivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelMedicosAtivosActionPerformed
        String query = "select p.* from pessoas p join medicoS pa on (pa.pes_id = p.pes_id) "
                + "where pa.ativo = 1 "
                + "order by p.pes_nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Médicos ativos");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_pessoas_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelMedicosAtivosActionPerformed

    private void mniRelConveniosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRelConveniosActionPerformed
        String query = "select c.* from convenios c "
                + "order by c.nome asc";
        

        HashMap map = new HashMap();
        map.put("TITULO", "Convênios");
        map.put("SUBTITULO","");
        map.put("QUERY",query);

        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_convenios_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniRelConveniosActionPerformed

    private void mniPacientesConvenioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPacientesConvenioActionPerformed
        HashMap map = new HashMap();
        
        Relatorio relatorio = new Relatorio();
        relatorio.setRelName("rp_clientes_por_convenios_ret.jasper");
        relatorio.setParams(map);
        relatorio.setConexao(Conexao.getConexao());
        relatorio.setIsExiteOnClose(false);
        Thread th = new Thread(relatorio);
        th.start();
    }//GEN-LAST:event_mniPacientesConvenioActionPerformed

    private void mniReferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniReferenciasActionPerformed
        File manual = null;
        manual = new File("manual.pdf");
        if (manual.exists()) {
            Desktop desk = Desktop.getDesktop();
            try {
                desk.open(manual);
            } catch (IOException ex) {
                ShowMessage.errorMessage("Nenhum arquivo encontrado!");
                Log.log(FrmPrincipal.class.getName(), ex);
            }
        } else {
            ShowMessage.errorMessage("Nenhum arquivo encontrado!");
        }
        
    }//GEN-LAST:event_mniReferenciasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new DlgOrdemServico(this, rootPaneCheckingEnabled).setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new DlgAgenda(this, rootPaneCheckingEnabled).setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows Classic look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows Classic (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCliente;
    private javax.swing.JButton btnConfiguracoes;
    private javax.swing.JButton btnEndereco;
    private javax.swing.JButton btnProdutos;
    private javax.swing.JButton btnProfissional;
    private javax.swing.JButton btnServicos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblInformacoes;
    private javax.swing.JLabel lblLogoMarca;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnAjuda;
    private javax.swing.JMenu mnCadastros;
    private javax.swing.JMenu mnEditar;
    private javax.swing.JMenu mnRelConvenios;
    private javax.swing.JMenu mnRelMedicos;
    private javax.swing.JMenu mnRelPacientes;
    private javax.swing.JMenu mnRelProfissionais;
    private javax.swing.JMenu mnRelatorios;
    private javax.swing.JMenuItem mnTrocarUsuario;
    private javax.swing.JMenuItem mniAlterarSenha;
    private javax.swing.JMenuItem mniClientes;
    private javax.swing.JMenuItem mniConfiguracoes;
    private javax.swing.JMenuItem mniEnderecos;
    private javax.swing.JMenuItem mniLogErro;
    private javax.swing.JMenuItem mniPacientesConvenio;
    private javax.swing.JMenuItem mniProdutos;
    private javax.swing.JMenuItem mniProfissionais;
    private javax.swing.JMenuItem mniReferencias;
    private javax.swing.JMenuItem mniRelAniversariantes;
    private javax.swing.JMenuItem mniRelConvenios;
    private javax.swing.JMenuItem mniRelMedicosAtivos;
    private javax.swing.JMenuItem mniRelMedicosCadPeriodo;
    private javax.swing.JMenuItem mniRelMedicosInativos;
    private javax.swing.JMenuItem mniRelPacientesAtivos;
    private javax.swing.JMenuItem mniRelPacientesCadPeriodo;
    private javax.swing.JMenuItem mniRelPacientesInativos;
    private javax.swing.JMenuItem mniRelProfissionaisAtivos;
    private javax.swing.JMenuItem mniRelProfissionaisCadPeriodo;
    private javax.swing.JMenuItem mniRelProfissionaisInativos;
    private javax.swing.JMenuItem mniServicos;
    private javax.swing.JMenuItem mniSobre;
    private javax.swing.JPanel pnUsuario;
    private javax.swing.JPanel pnUsuario1;
    private javax.swing.JPanel statusBar;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    /**
     * Este método é essencial em todos os forms do sistema pois é ele quem garante o acesso
     * ao sistema.
     */
    private void verPermissao() {
        //nota este não é o usuário que está sendo modificado
        // mas, sim o usuário que está logado no sistema
        Usuario usuario = Sessao.getInstance().getUsuario();
        
        enabledButtons(false);
        enabledMenus(false);
        
        /**
         * Verifica se ele possui permissão para ver a tela principal
         */
        if (!usuario.isAllowed(CasoUso.TELA_PRINCIPAL)){
            ShowMessage.informationMessage("Usuario " + usuario.getLogin() + ","
                    + " não possui acesso a esta área!"
                    );
            System.exit(0);
        }
        /** FIM PERMISSÃO TELA PRINCIPAL */
        
        /** PERMISSÃO MENU CADASTRO */
        if (usuario.isAllowed(CasoUso.MANUTENCAO_CLIENTES, Permissao.LER)){
            btnCliente.setVisible(true);
            mniClientes.setVisible(true);
            
        }
        if (usuario.isAllowed(CasoUso.MANUTENCAO_SERVICOS, Permissao.LER)){
            btnServicos.setVisible(true);
            mniServicos.setVisible(true);
        }
        if (usuario.isAllowed(CasoUso.MANUTENCAO_PRODUTOS, Permissao.LER)){
            btnProdutos.setVisible(true);
            mniProdutos.setVisible(true);
        }
        if (usuario.isAllowed(CasoUso.MANUTENCAO_PROFISSIONAIS, Permissao.LER)){
            btnProfissional.setVisible(true);
            mniProfissionais.setVisible(true);
        }
        if (usuario.isAllowed(CasoUso.MANUTENCAO_ENDERECOS, Permissao.LER)){
            btnEndereco.setVisible(true);
            mniEnderecos.setVisible(true);
        }
        /** FIM PERMISSÃO MENU CADASTRO */
        
        /** PERMISSÃO MENU EDITAR */
        if (usuario.isAllowed(CasoUso.CONFIGURACOES_SISTEMA, Permissao.LER)){
            btnConfiguracoes.setVisible(true);
            mniConfiguracoes.setVisible(true);
        }
        /** FIM PERMISSÃO MENU EDITAR */
        
    }//fim verPermissoes

    private void enabledMenus(boolean bool){
        enabledMenuCadastros(bool);
        enabledMenuEditar(bool);
        enabledMenuRelatorios(bool);
    }
    private void enabledButtons(boolean bool){
        btnCliente.setVisible(bool);
        btnServicos.setVisible(bool);
        btnProdutos.setVisible(bool);
        btnProfissional.setVisible(bool);
        btnEndereco.setVisible(bool);
        btnConfiguracoes.setVisible(bool);
    }

    private void enabledMenuCadastros(boolean bool) {
        mniClientes.setVisible(bool);
        mniServicos.setVisible(bool);
        mniProdutos.setVisible(bool);
        mniProfissionais.setVisible(bool);
        mniEnderecos.setVisible(bool);
    }

    private void enabledMenuEditar(boolean bool) {
        mniConfiguracoes.setVisible(bool);
        
    }

    private void enabledMenuRelatorios(boolean bool) {
        
    }

    private void login() {
        //Controle de permissão
        //Se houver usuário na sessão pode passar se não barra
        if (Sessao.getInstance().getUsuario() == null || Sessao.getInstance().getUsuario().getLogin() == null){
            FrmLogin login = new FrmLogin(null, true);
            login.setVisible(true);
            
            if (login.IS_LOGGED()){
                verPermissao();
                loadInformacoes();
            }
            else {
                System.exit(0);
            }//fim se não logado
        }//fim se sessão não tem usuario
    }

    private void loadInformacoes() {
        lblHorario.setText("Logado em: " + DataDefault.parseDataHoraBR(new Date()));
        lblUsuario.setText("Usuário: " + Sessao.getInstance().getUsuario().getLogin());
        lblInformacoes.setText("Host: " + InformacoesSistema.getInstance().getHostName()
        + " IP: " + InformacoesSistema.getInstance().getIpAddress());
        setFoto();
    }
    
    private void setFoto(){
        Configuracoes c = new ConfiguracoesController()
                .findCfgDefault();
        if (c.getConfLogomarca() != null) {
            String confLogomarca = TextFile.getINSTANCE().getPathAbsoluto() + c.getConfLogomarca();
            ImageIcon ico = new ImageIcon(confLogomarca);
            ico.setImage(ico.getImage().getScaledInstance(300, 200, 50));
            lblLogoMarca.setIcon(ico);
        } else lblLogoMarca.setIcon(null);
        
    }
}//fim Principal